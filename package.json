{
  "name": "campaign-mailchimp-audience-import",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "config": {
    "s3BucketName": "campaigns-deploy",
    "region": "us-east-1",
    "cloudFormationStackName": "",
    "functionName": "",
    "accountId": ""
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@mailchimp/mailchimp_marketing": "^3.0.44",
    "async": "^2.6.2",
    "athena-express": "7.1.0",
    "aws-sdk": "^2.404.0",
    "body-parser": "^1.19.0",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "loadsh": "^0.0.4",
    "mailchimp-api-v3": "^1.15.0",
    "md5": "^2.3.0",
    "nodemon": "^2.0.7",
    "pg": "^8.6.0",
    "ping": "^0.4.1"
  },
  "scripts": {
    "mergeScript": "node ../build-scripts/mergescripts",
    "demergeScript": "node ../build-scripts/demergescripts",
    "test": "cross-env NODE_ENV=test jest --coverage --testTimeout=10000",
    "version": "node ../build-scripts/svninfo",
    "start": "cross-env NODE_ENV=development nodemon --inspect app.local.js",
    "config": "node ../build-scripts/configure.js",
    "deconfig": "node ../build-scripts/deconfigure.js",
    "local": "node ../build-scripts/local",
    "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
    "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
    "package-deploy": "npm run package && npm run deploy",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
    "win-config": "npm run config",
    "win-deconfig": "npm run deconfig",
    "win-local": "npm run local",
    "win-invoke-lambda": "aws lambda invoke --function-name %npm_package_config_functionName% --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-bucket": "aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket %npm_package_config_s3BucketName% --output-template packaged-sam.yaml --region %npm_package_config_region%",
    "win-deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name %npm_package_config_cloudFormationStackName% --capabilities CAPABILITY_IAM --region %npm_package_config_region%",
    "win-package-deploy": "npm run win-package && npm run win-deploy",
    "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
    "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-deploy"
  }
}
